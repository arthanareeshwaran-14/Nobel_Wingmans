// ESP32 version with SIM700G (Serial2) + PZEM (Serial1) + TinyGPS++
// Libraries required:
//   - PZEM004Tv30
//   - LiquidCrystal_I2C
//   - TinyGPSPlus
//   - WiFi
//   - HTTPClient
//   - ArduinoJson

#include <PZEM004Tv30.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <TinyGPS++.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <WiFiClientSecure.h>
#include <ArduinoJson.h>

// ----------------- User config -----------------
const char* ssid = "Esu";
const char* password = "148200567";

const char* firebase_url = "https://kesb-demo---shield-default-rtdb.firebaseio.com/pzem.json";
// ------------------------------------------------

// ---------- LCD ----------
LiquidCrystal_I2C lcd(0x27, 16, 2);

// ---------- Buzzer ----------
#define BUZZER_PIN 2   // change if needed
float highPowerThreshold = 100.0; // Watts threshold for unauthorized use

// ---------- UART / Pin assignment (change to your wiring) ----------
// Note: ESP32 has 3 hardware UARTs: Serial (USB), Serial1, Serial2
// We'll use:
//   Serial  -> USB debug
//   Serial1 -> PZEM       (RX1, TX1)
//   Serial2 -> SIM700G    (RX2, TX2)   [also provides GPS NMEA]
// Adjust pins if required by your board

#define PZEM_RX_PIN 16  // ESP32 GPIO for RX1 (connect to PZEM TX)
#define PZEM_TX_PIN 17  // ESP32 GPIO for TX1 (connect to PZEM RX)

#define SIM_RX_PIN 27   // ESP32 GPIO for RX2 (connect to SIM700G TX)
#define SIM_TX_PIN 26   // ESP32 GPIO for TX2 (connect to SIM700G RX)

// ---------- HardwareSerial instances ----------
HardwareSerial SerialPZEM(1);   // Serial1
HardwareSerial SerialSIM(2);    // Serial2

PZEM004Tv30 pzem(&SerialPZEM);

// ---------- GPS parser (reads NMEA from SIM700G) ----------
TinyGPSPlus gps;

// ---------- Secure client ----------
WiFiClientSecure secureClient;

// ---------- Helper flags ----------
bool wifiConnected = false;
unsigned long lastFirebaseMillis = 0;
const unsigned long FIREBASE_INTERVAL = 5000; // 5s (adjust as needed)

// ---------- Forward declarations ----------
void sim700Init();
bool sim700SendSMS(const char* number, const char* message);
void publishToFirebase(float voltage, float current, float power, float energy, float freq, float pf, const char* alert, double lat, double lon);
void readAndParseSIMGPS();
void showOnLCD(float voltage, float current, float power, float freq);

// ---------------- setup ----------------
void setup() {
  // USB serial for debugging
  Serial.begin(115200);
  delay(100);

  // Init LCD
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(" SHIELD Activated ");
  delay(2000);
  lcd.clear();

  // Buzzer init
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  // Start hardware serials
  SerialPZEM.begin(9600, SERIAL_8N1, PZEM_RX_PIN, PZEM_TX_PIN); // PZEM default 9600
  SerialSIM.begin(9600, SERIAL_8N1, SIM_RX_PIN, SIM_TX_PIN);   // SIM700G default 9600

  // Small startup delay
  delay(200);

  // Initialize SIM700G (basic)
  sim700Init();

  // Connect WiFi
  Serial.printf("Connecting to WiFi: %s\n", ssid);
  WiFi.begin(ssid, password);
  unsigned long wifiStart = millis();
  while (millis() - wifiStart < 20000) { // 20s timeout
    if (WiFi.status() == WL_CONNECTED) break;
    delay(500);
    Serial.print(".");
  }
  wifiConnected = (WiFi.status() == WL_CONNECTED);
  if (wifiConnected) {
    Serial.println("\nWiFi Connected âœ…");
    secureClient.setInsecure(); // skip cert checks (same as before) - change for production
  } else {
    Serial.println("\nWiFi NOT connected - will use SIM SMS fallback for alerts");
  }
}

// ---------------- loop ----------------
void loop() {
  // Read GPS NMEA if available on SIM serial
  readAndParseSIMGPS();

  // Read PZEM values
  float voltage = pzem.voltage();
  float current = pzem.current();
  float power   = pzem.power();
  float energy  = pzem.energy();
  float freq    = pzem.frequency();
  float pf      = pzem.pf();

  // Determine alert condition (same threshold logic)
  bool alert = (!isnan(power) && power > highPowerThreshold);

  // Buzzer
  digitalWrite(BUZZER_PIN, alert ? HIGH : LOW);

  // Show on LCD (or error)
  showOnLCD(voltage, current, power, freq);

  // Get last known GPS
  double lat = NAN, lon = NAN;
  if (gps.location.isValid()) {
    lat = gps.location.lat();
    lon = gps.location.lng();
  }

  // Upload to Firebase periodically if WiFi connected
  if (wifiConnected && millis() - lastFirebaseMillis > FIREBASE_INTERVAL) {
    lastFirebaseMillis = millis();
    const char* alertText = alert ? "Unauthorized Fence Detected" : "Normal";
    publishToFirebase(voltage, current, power, energy, freq, pf, alertText, lat, lon);
  }

  // If WiFi not available and alert is ON, send SMS fallback (rate-limited)
  static unsigned long lastSms = 0;
  const unsigned long SMS_INTERVAL = 60UL * 1000UL; // once per minute max
  if (!wifiConnected && alert && millis() - lastSms > SMS_INTERVAL) {
    lastSms = millis();
    char smsMsg[200];
    if (gps.location.isValid()) {
      snprintf(smsMsg, sizeof(smsMsg), "ALERT: Unauthorized fence detected!\nP:%.0fW I:%.2fA V:%.1fV\nLat:%.6f Lon:%.6f",
               power, current, voltage, lat, lon);
    } else {
      snprintf(smsMsg, sizeof(smsMsg), "ALERT: Unauthorized fence detected!\nP:%.0fW I:%.2fA V:%.1fV\nGPS: N/A",
               power, current, voltage);
    }
    // Replace phone number with your emergency contact
    const char* phoneNumber = "+911234567890";
    bool sent = sim700SendSMS(phoneNumber, smsMsg);
    Serial.printf("SMS sent: %s\n", sent ? "OK" : "FAILED");
  }

  delay(3000);
}

// ---------------- Helper functions ----------------

void showOnLCD(float voltage, float current, float power, float freq) {
  lcd.clear();
  lcd.setCursor(0, 0);
  if (!isnan(voltage)) {
    lcd.print("V:");
    lcd.print(voltage, 1);
  } else lcd.print("V:Err");

  lcd.setCursor(9, 0);
  if (!isnan(current)) {
    lcd.print("I:");
    lcd.print(current, 2);
  } else lcd.print("I:Err");

  lcd.setCursor(0, 1);
  if (!isnan(power)) {
    lcd.print("P:");
    lcd.print(power, 0);
    lcd.print("W ");
  } else lcd.print("P:Err");

  if (!isnan(freq)) {
    lcd.setCursor(9, 1);
    lcd.print("F:");
    lcd.print(freq, 1);
    lcd.print("Hz");
  }
}

// Very basic SIM700G init. Add your existing initialization logic here if you already have it.
void sim700Init() {
  Serial.println("Initializing SIM700G...");
  // Wake module & check communication
  SerialSIM.setTimeout(1000);

  // Simple AT check
  for (int i = 0; i < 5; ++i) {
    SerialSIM.println("AT");
    delay(200);
    while (SerialSIM.available()) {
      String r = SerialSIM.readStringUntil('\n');
      r.trim();
      if (r.length()) Serial.printf("SIM: %s\n", r.c_str());
    }
    delay(200);
  }

  // Echo off
  SerialSIM.println("ATE0");
  delay(200);

  // Enable SMS text mode
  SerialSIM.println("AT+CMGF=1");
  delay(200);

  // Enable GNSS if your SIM700G supports it (example AT command)
  // Many SIM700G require: AT+CGNSPWR=1
